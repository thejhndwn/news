example for affecting visemes programmatically

import bpy

# Scene setup (using your existing setup)
scene = bpy.context.scene
scene.frame_start = 0
scene.frame_end = 240  # 10 seconds at 24 FPS

# Find your VRM model (this should be the mesh object, not the armature)
# Usually the mesh is a child of the armature
vrm_mesh = None
for obj in bpy.data.objects:
    if obj.type == 'MESH' and obj.data.shape_keys:
        vrm_mesh = obj
        break

if not vrm_mesh:
    print("No mesh with shape keys found! Available objects:")
    for obj in bpy.data.objects:
        print(f"{obj.name} (type: {obj.type})")
    raise Exception("Check objects above and find your VRM mesh.")

# Print available shape keys to help identify visemes
print("Available shape keys:")
for shape_key in vrm_mesh.data.shape_keys.key_blocks:
    print(f" - {shape_key.name}")

# VRM models typically have viseme shape keys with names like:
# - A, I, U, E, O (Japanese vowels)
# - Blend shapes might also be named like "Viseme_a", "Viseme_i", etc.

# Example animation: Cycle through A-I-U-E-O visemes
viseme_keys = ["A", "I", "U", "E", "O"]  # Adjust these names based on your model's actual shape keys
frames_per_viseme = 48  # Each viseme gets 2 seconds at 24 FPS

# Function to animate a specific viseme
def set_viseme(viseme_name, value, frame):
    shape_key = None
    
    # Try to find the shape key with different naming patterns
    potential_names = [
        viseme_name,
        f"Viseme_{viseme_name}",
        f"viseme_{viseme_name.lower()}",
        f"VRC.v_{viseme_name.lower()}"  # VRChat naming convention
    ]
    
    for name in potential_names:
        if name in vrm_mesh.data.shape_keys.key_blocks:
            shape_key = vrm_mesh.data.shape_keys.key_blocks[name]
            break
    
    if shape_key:
        # Set the current frame
        scene.frame_set(frame)
        
        # Set shape key value
        shape_key.value = value
        
        # Insert keyframe
        shape_key.keyframe_insert("value", frame=frame)
        return True
    else:
        print(f"Warning: Could not find shape key for viseme '{viseme_name}'")
        return False

# Animation - cycle through visemes with transitions
current_frame = 0
for i, viseme in enumerate(viseme_keys):
    # Start with all visemes at zero
    for v in viseme_keys:
        set_viseme(v, 0, current_frame)
    
    # Fade in current viseme
    set_viseme(viseme, 1.0, current_frame + 12)
    
    # Hold the viseme
    set_viseme(viseme, 1.0, current_frame + frames_per_viseme - 12)
    
    # Fade out current viseme
    set_viseme(viseme, 0.0, current_frame + frames_per_viseme)
    
    # Move to next viseme
    current_frame += frames_per_viseme

print("Viseme animation complete!")